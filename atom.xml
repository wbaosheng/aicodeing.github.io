<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AICoding Technical Blog</title>
  
  <subtitle>AICoding team</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://aicodeing.github.io/"/>
  <updated>2017-11-20T01:33:08.000Z</updated>
  <id>http://aicodeing.github.io/</id>
  
  <author>
    <name>AICoding Team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 形参与实参</title>
    <link href="http://aicodeing.github.io/Java-%E5%BD%A2%E5%8F%82%E4%B8%8E%E5%AE%9E%E5%8F%82/"/>
    <id>http://aicodeing.github.io/Java-形参与实参/</id>
    <published>2017-11-16T05:41:28.000Z</published>
    <updated>2017-11-20T01:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天在头条上看到一道经典面试题,引发了一些思考。也是写这篇文章的导火索。</p><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>请看题:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span><span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">1</span>;</span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//请实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这个题后 瞬间觉得有坑。也觉得为什么要书写一个<code>swap</code>方法呢？如下实现不是更简单:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">1</span>; </span><br><span class="line">        Integer b = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        Integer tmp = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = tmp;</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>完美实现交换。但是请注意，这是一道面试题，要的就是考验一些知识点。所以还是老老实实的实现<code>swap</code>方法吧。<br>有的同学可能会想，<code>Integer</code> 是一个包装类型,是对Int的装箱和拆箱操作。其实也是一个对象。既然是对象，直接更改对象的引用不就行了？<br>思路没问题，我们首先看看实现:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">       Integer tmp = numa;</span><br><span class="line">       numa = numb;</span><br><span class="line">       numb = tmp;</span><br><span class="line">       System.out.println(<span class="string">"numa="</span> + numa + <span class="string">",numb="</span> + numb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>输出:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">numa=<span class="number">2</span>,numb=<span class="number">1</span></span><br><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p>不出意外,没有成功<br>这是什么原因呢？<br>技术老手一看就知道问题出在<a href="https://www.baidu.com/s?wd=java%E5%BD%A2%E5%8F%82%E5%92%8C%E5%AE%9E%E5%8F%82%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener">形参和实参</a><br>混淆了</p><h3 id="JAVA的形参和实参的区别"><a href="#JAVA的形参和实参的区别" class="headerlink" title="JAVA的形参和实参的区别:"></a>JAVA的形参和实参的区别:</h3><p><strong>形参</strong> 顾名思义:就是形式参数，用于定义方法的时候使用的参数，是用来接收调用者传递的参数的。<br>    形参只有在方法被调用的时候，虚拟机才会分配内存单元，在方法调用结束之后便会释放所分配的内存单元。<br>    因此,形参只在方法内部有效，所以针对引用对象的改动也无法影响到方法外。</p><p><strong>实参</strong> 顾名思义:就是实际参数，用于调用时传递给方法的参数。实参在传递给别的方法之前是要被预先赋值的。<br>    在本例中 swap 方法 的numa, numb 就是形参，传递给 swap 方法的 a,b 就是实参</p><p>注意:<br>在<code>值传递</code>调用过程中，只能把实参传递给形参，而不能把形参的值反向作用到实参上。在函数调用过程中，形参的值发生改变，而实参的值不会发生改变。<br>而在<code>引用传递</code>调用的机制中，实际上是将实参引用的地址传递给了形参，所以任何发生在形参上的改变也会发生在实参变量上。<br>那么问题来了，什么是<code>值传递</code>和<code>引用传递</code></p><h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><p>在谈<code>值传递</code>和<code>引用传递</code>之前先了解下 Java的数据类型有哪些</p><h4 id="JAVA的数据类型"><a href="#JAVA的数据类型" class="headerlink" title="JAVA的数据类型"></a>JAVA的数据类型</h4><p>Java 中的数据类型分为两大类，<code>基本类型</code>和<code>对象类型</code>。相应的，变量也有两种类型：<code>基本类型</code>和<code>引用类型</code><br><code>基本类型</code>的变量保存<code>原始值</code>，即它代表的值就是数值本身,<code>原始值</code>一般对应在内存上的<code>栈区</code><br>而<code>引用类型</code>的变量保存<code>引用值</code>，<code>引用值</code>指向内存空间的地址。代表了某个对象的引用，而不是对象本身。对象本身存放在这个引用值所表示的地址的位置。<code>被引用的对象</code>对应内存上的<code>堆内存区</code>。<br>基本类型包括：<code>byte</code>,<code>short</code>,<code>int</code>,<code>long</code>,<code>char</code>,<code>float</code>,<code>double</code>,<code>boolean</code> 这八大基本数据类型<br>引用类型包括：<code>类类型</code>，<code>接口类型</code>和<code>数组</code>  </p><h4 id="变量的基本类型和引用类型的区别"><a href="#变量的基本类型和引用类型的区别" class="headerlink" title="变量的基本类型和引用类型的区别"></a>变量的基本类型和引用类型的区别</h4><p>基本数据类型在声明时系统就给它分配空间<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;<span class="comment">//虽然没有赋值，但声明的时候虚拟机就会 分配 4字节 的内存区域,而引用数据类型不同，它声明时只给变量分配了引用空间，而不分配数据空间:</span></span><br><span class="line">String str;<span class="comment">//声明的时候没有分配数据空间，只有 4byte 的引用大小，在栈区，而在堆内存区域没有任何分配</span></span><br><span class="line">str.length(); <span class="comment">//这个操作就会报错，因为堆内存上还没有分配内存区域，而 a = 1; 这个操作就不会报错。</span></span><br></pre></td></tr></table></figure></p><p>好了，Java的数据类型说完了，继续我们的<code>值传递</code>和<code>引用传递</code>的话题。<br>先背住一个概念:<code>基本类型</code>的变量是<code>值传递</code>；<code>引用类型</code>的变量<br>结合前面说的 <code>形参</code>和<code>实参</code>。</p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><p>方法调用时，实际参数把它的值传递给对应的形式参数，函数接收的是原始值的一个copy，<br>此时内存中存在两个相等的基本类型，即实际参数和形式参数，后面方法中的操作都是对形参这个值的修改，不影响实际参数的值</p><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><p>也称为<code>地址传递</code>，<code>址传递</code>。方法调用时，实际参数的引用(地址，而不是参数的值)被传递给方法中相对应的形式参数，函数接收的是原始值的内存地址<br>在方法执行中，形参和实参内容相同，指向同一块内存地址，方法执行中对引用的操作将会影响到实际对象<br>通过例子来说话:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> age;</span><br><span class="line">       Person(<span class="keyword">int</span> age) &#123;</span><br><span class="line">           <span class="keyword">this</span>.age = age;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line">       testValueT(a);</span><br><span class="line">       System.out.println(<span class="string">"a="</span> + a);</span><br><span class="line">       Person person = <span class="keyword">new</span> Person(<span class="number">20</span>);</span><br><span class="line">       testReference(person);</span><br><span class="line">       System.out.println(<span class="string">"person.age="</span> + person.age);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testValueT</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">       a = <span class="number">200</span>;</span><br><span class="line">       System.out.println(<span class="string">"int testValueT a="</span> + a);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReference</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">       person.age = <span class="number">10</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> testValueT a=<span class="number">200</span></span><br><span class="line">a=<span class="number">100</span></span><br><span class="line">person.age=<span class="number">10</span></span><br></pre></td></tr></table></figure></p><p>看见 <code>值传递</code> a的值并没有改变，而 <code>引用传递</code>的 persion.age已经改变了<br>有人说<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReference</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        person = <span class="keyword">new</span> Person(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么 输出的 person.age 还是20呢？<br>我想说 了解一下什么是<code>引用类型</code>吧？ 方法内把 <code>形参</code>的地址引用换成了另一个对象，并没有改变这个对象,并不能影响 外边<code>实参</code>还引用原来的对象，因为 形参只在方法内有效哦。</p><p>有人或许还有疑问，按照文章开头的例子，<code>Integer</code>也是 <code>引用类型</code>该当如何呢？<br>其实 类似的 <code>String</code>,<code>Integer</code>,<code>Float</code>,<code>Double</code>,<code>Short</code>,<code>Byte</code>,<code>Long</code>,<code>Character</code>等等基本包装类型类。因为他们本身没有提供方法去改变内部的值，例如<code>Integer</code> 内部有一个<code>value</code> 来记录<code>int</code>基本类型的值，但是没有提供修改它的方法，而且 也是<code>final</code>类型的，无法通过<code>常规手段</code>更改。<br>所以虽然他们是<code>引用类型</code>的，但是我们可以认为它是<code>值传递</code>,这个也只是<code>认为</code>,事实上还是<code>引用传递</code>,<code>址传递</code>。</p><hr><p>好了，基础知识补充完毕，然我们回到面试题吧</p><hr><p><strong>回归正题</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        Integer tmp = numa;</span><br><span class="line">        numa = numb;</span><br><span class="line">        numb = tmp;</span><br><span class="line">        System.out.println(<span class="string">"numa="</span> + numa + <span class="string">",numb="</span> + numb);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>通过补习基础知识，我们很明显知道 上面这个方法实现替换 是不可行的。因为<code>Interger</code>虽然是<code>引用类型</code><br>但是上述操作只是改变了<code>形参</code>的引用，而没有改变<code>实参</code>对应的<code>对象</code>。</p><p>那么思路来了，我们<code>通过特殊手段</code>改变 <code>Integer</code>内部的<code>value</code>属性<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        Integer tmp = numa;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);<span class="comment">//成功的将numa 引用的 1的对象 值改为 2</span></span><br><span class="line">            field.set(numb, tmp); <span class="comment">//由于 tmp 也是指向 numa 未改变前指向的堆 即对象1 ，经过前一步，已经将对象1的值改为了2，自然 numb 也是2，所以改动失效</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>输出结果:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">2</span></span><br></pre></td></tr></table></figure></p><p><a href="">又来疑问了</a>？为何 <code>a</code>的值改变成功，而<code>b</code>的改变失败呢？</p><p><em>见代码注释</em><br>所以其实 <code>field.set(numb, tmp);</code> 是更改成功的，只是 tmp 经过前一行代码的执行，已经变成了 2。<br>那么如何破呢？<br>我们有了一个思路，既然是 <code>tmp</code>的引用的对象值变量，那么我让<code>tmp</code>不引用 <code>numa</code>了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> tmp = numa.intValue();<span class="comment">//tmp 定义为基本数据类型</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">           field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">           field.set(numa, numb);<span class="comment">//这个时候并不改变 tmp 的值</span></span><br><span class="line">           field.set(numb, tmp);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>这种情况下 对 <code>numa</code> 这个对象的修改就不会导致 <code>tmp</code> 的值变化了,看一下运行结果</p><pre><code>a=1,b=2a=2,b=2</code></pre><p>这是为啥？有没有<code>快疯</code>啦？<br>难道我们的思路错了？<br>先别着急，我们看看这个例子：<br>仅仅是将前面的例子 <code>a</code>的值改为 129，<code>b</code>的值改为130</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="number">129</span>;</span><br><span class="line">        Integer b = <span class="number">130</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = numa.intValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);</span><br><span class="line">            field.set(numb, tmp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">129</span>,b=<span class="number">130</span></span><br><span class="line">a=<span class="number">130</span>,b=<span class="number">129</span></span><br></pre></td></tr></table></figure></p><p>有没有<code>怀疑人生</code>？我们的思路没有问题啊?为什么 换个数值就行了呢？<br>我们稍微修改一下程序<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer a = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer b = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">        swap(a, b);</span><br><span class="line">        System.out.println(<span class="string">"a="</span> + a + <span class="string">",b="</span> + b);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = numa.intValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);</span><br><span class="line">            field.set(numb, tmp);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p> 运行结果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="number">1</span>,b=<span class="number">2</span></span><br><span class="line">a=<span class="number">2</span>,b=<span class="number">1</span></span><br></pre></td></tr></table></figure></p><p><em>哎？为啥 1 和 2 也可以了?</em><br><em>我们这时肯定猜想和<code>Integer</code>的装箱 拆箱有关</em></p><h3 id="装箱，拆箱-概念"><a href="#装箱，拆箱-概念" class="headerlink" title="装箱，拆箱 概念"></a>装箱，拆箱 概念</h3><h4 id="Integer的装箱操作"><a href="#Integer的装箱操作" class="headerlink" title="Integer的装箱操作"></a>Integer的装箱操作</h4><p>为什么 <code>Integer a = 1</code> 和 <code>Integer a = new Integer(1)</code> 效果不一样<br>那就瞅瞅源码吧？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns an &#123;<span class="doctag">@code</span> Integer&#125; instance representing the specified</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> int&#125; value.  If a new &#123;<span class="doctag">@code</span> Integer&#125; instance is not</span></span><br><span class="line"><span class="comment"> * required, this method should generally be used in preference to</span></span><br><span class="line"><span class="comment"> * the constructor &#123;<span class="doctag">@link</span> #Integer(int)&#125;, as this method is likely</span></span><br><span class="line"><span class="comment"> * to yield significantly better space and time performance by</span></span><br><span class="line"><span class="comment"> * caching frequently requested values.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This method will always cache values in the range -128 to 127,</span></span><br><span class="line"><span class="comment"> * inclusive, and may cache other values outside of this range.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  i an &#123;<span class="doctag">@code</span> int&#125; value.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> an &#123;<span class="doctag">@code</span> Integer&#125; instance representing &#123;<span class="doctag">@code</span> i&#125;.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>  1.5</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过注释知道，java推荐 <code>Integer.valueOf</code> 方式初始化一个<code>Interger</code>因为有 缓存了<code>-128 - 127</code>的数字<br>我们直接定义 <code>Integer a = 1</code> 具有这个功能，所以 Jvm 底层实现 是通过 <code>Integer.valueOf</code>这个方法<br>再看 <code>field.set(numb, tmp);</code><br>我们打断点，发现通过反射设置 <code>value</code>时 竟然走了 <code>Integer.valueOf</code> 方法<br>下面是 我们调用 <code>swap</code>前后的 <code>IntegerCache.cache</code> 值得变化</p><h5 id="反射修改前"><a href="#反射修改前" class="headerlink" title="反射修改前:"></a>反射修改前:</h5><p><img src="/img/java_before_change.jpg" alt="">  </p><h5 id="反射修改后"><a href="#反射修改后" class="headerlink" title="反射修改后"></a>反射修改后</h5><p><img src="/img/java_after_chang.jpg" alt=""><br>在反射修改前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntegerCache.cache[<span class="number">128</span>]=<span class="number">0</span></span><br><span class="line">IntegerCache.cache[<span class="number">129</span>]=<span class="number">1</span></span><br><span class="line">IntegerCache.cache[<span class="number">130</span>]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>通过反射修改后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">IntegerCache.cache[<span class="number">128</span>]=<span class="number">0</span></span><br><span class="line">IntegerCache.cache[<span class="number">129</span>]=<span class="number">2</span></span><br><span class="line">IntegerCache.cache[<span class="number">130</span>]=<span class="number">2</span></span><br></pre></td></tr></table></figure><p>再调用 <code>field.set(numb, tmp)</code> tmp这时等于1 对应的 角标 129 ,但是这个值已经变成了2<br>所以出现了刚才 <code>奇怪的结果</code><br>原来都是<code>缓存的锅</code><br>下面趁机再看个例子 加深理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Integer testA = <span class="number">1</span>;</span><br><span class="line">Integer testB = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">Integer testC = <span class="number">128</span>;</span><br><span class="line">Integer testD = <span class="number">128</span>;</span><br><span class="line">System.out.println(<span class="string">"testA=testB "</span> + (testA == testB) + <span class="string">",\ntestC=testD "</span> + (testC == testD));</span><br></pre></td></tr></table></figure><p> 输出结果:</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">testA=testB <span class="keyword">true</span>,</span><br><span class="line">testC=testD <span class="keyword">false</span></span><br></pre></td></tr></table></figure><p>通过这小示例，在 -128 到 127的数字都走了缓存，这样 <code>testA</code> 和 <code>testB</code>引用的是同一片内存区域的同一个对象。<br>而 <code>testC</code> <code>testD</code> 数值大于127 所以 没有走缓存，相当于两个<code>Integer</code>对象，在堆内存区域有两个对象。<br>两个对象自如不相等。<br>在前面的示例中 我们 通过<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">Integer b = <span class="keyword">new</span> Integer(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p>方式初始化 <code>a</code>,<code>b</code> 我们的交换算法没有问题，也是这个原因。</p><h5 id="那么到目前为止我们的swap-方法可以完善啦"><a href="#那么到目前为止我们的swap-方法可以完善啦" class="headerlink" title="那么到目前为止我们的swap 方法可以完善啦"></a>那么到目前为止我们的<code>swap</code> 方法可以完善啦</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Integer numa, Integer numb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> tmp = numa.intValue();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field field = Integer.class.getDeclaredField(<span class="string">"value"</span>);</span><br><span class="line">            field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            field.set(numa, numb);</span><br><span class="line">            field.set(numb, <span class="keyword">new</span> Integer(tmp));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>只需将之前的 <code>field.set(numb, tmp)</code> 改为 <code>field.set(numb, new Integer(tmp))</code></p><p>到此, 这个面试我们已经通过了，还有一个疑问我没有解答。<br>为什么 <code>field.set(numb, tmp)</code> 会执行 <code>Integer.valueOf()</code> 而 <code>field.set(numb, new Integer(tmp))</code> 不会执行。<br>这就是<code>Integer的装箱</code>操作，当 给 <code>Integer.value</code> 赋值 <code>int</code>时，JVM 检测到 <code>int不是Integer类型</code>,需要装箱，才执行了<code>Integer.valueOf()</code>方法。而<code>field.set(numb, new Integer(tmp))</code> 设置的 是Integer类型了，就不会再拆箱后再装箱。</p><h3 id="Over-Thanks"><a href="#Over-Thanks" class="headerlink" title="Over Thanks"></a>Over Thanks</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天在头条上看到一道经典面试题,引发了一些思考。也是写这篇文章的导火索。&lt;/p&gt;
&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;请看题:&lt;br&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="Java" scheme="http://aicodeing.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://aicodeing.github.io/tags/Java/"/>
    
      <category term="形参" scheme="http://aicodeing.github.io/tags/%E5%BD%A2%E5%8F%82/"/>
    
      <category term="实参" scheme="http://aicodeing.github.io/tags/%E5%AE%9E%E5%8F%82/"/>
    
  </entry>
  
  <entry>
    <title>Markdown-常用语法</title>
    <link href="http://aicodeing.github.io/Markdown-%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
    <id>http://aicodeing.github.io/Markdown-常用语法/</id>
    <published>2017-11-15T11:49:19.000Z</published>
    <updated>2017-11-20T01:33:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇文章简要介绍常用的Markdown语法，方便快速查阅。</p><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><pre><code># 一级标题</code></pre><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><pre><code>## 二级标题</code></pre><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><pre><code>### 三级标题</code></pre><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><pre><code>#### 四级标题</code></pre><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><pre><code>##### 五级标题</code></pre><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><pre><code>###### 六级标题</code></pre><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><hr><pre><code>`***实现分隔线`</code></pre><hr><pre><code>`---实现分隔线`</code></pre><hr><pre><code>`___实现分隔线`</code></pre><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><table><thead><tr><th>Title</th><th>Content</th></tr></thead><tbody><tr><td>项目1</td><td>实现项目1方案</td></tr></tbody></table><pre><code>| Title|Content||---|---|项目1|实现项目1方案</code></pre><h2 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h2><h4 id="最普通的文本"><a href="#最普通的文本" class="headerlink" title="最普通的文本"></a>最普通的文本</h4><p>普通文本，直接书写，没有任何特殊符号</p><h4 id="单行文本"><a href="#单行文本" class="headerlink" title="单行文本"></a>单行文本</h4><pre><code>这是一行单行文本</code></pre><p><code>实现方案: 在单行文本前面加一个Tab</code></p><h4 id="多行文本"><a href="#多行文本" class="headerlink" title="多行文本"></a>多行文本</h4><h5 id="实现方案1"><a href="#实现方案1" class="headerlink" title="实现方案1:"></a>实现方案1:</h5><p>在每行文本前都加一个Tab 相当于多个单行文本</p><pre><code>这是多行文本的第一行这是多行文本的第二行这是多行文本的第三行</code></pre><h5 id="实现方案2"><a href="#实现方案2" class="headerlink" title="实现方案2:"></a>实现方案2:</h5><p>使用三个反引号，这也是代码的使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">反引号是 带有 ~ 符合的按键</span><br><span class="line">String VIDEO = <span class="string">"video"</span>;</span><br><span class="line">String TEXT = <span class="string">"text"</span>;</span><br><span class="line">String PHOTO = <span class="string">"photo"</span>;</span><br><span class="line">String HOME = <span class="string">"home"</span>;</span><br></pre></td></tr></table></figure><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>按照惯例，使用回车来换行，但是在Markdown上行不通。换行实现有以下方式:</p><pre><code>1.两行直接空出一行。  2.前一行后面保留两个空格，第二行自动换行</code></pre><h2 id="斜体-粗体-删除线-下划线"><a href="#斜体-粗体-删除线-下划线" class="headerlink" title="斜体,粗体,删除线,下划线"></a>斜体,粗体,删除线,下划线</h2><table><thead><tr><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><code>*斜体*</code></td><td><em>文字</em></td></tr><tr><td><code>_斜体_</code></td><td><em>文字</em></td></tr><tr><td><code>&lt;u&gt;下滑线&lt;/u&gt;</code></td><td><u>文字</u></td></tr><tr><td><code>**加粗**</code></td><td><strong>文字</strong></td></tr><tr><td><code>__加粗__</code></td><td><strong>文字</strong></td></tr><tr><td><code>~~删除线~~</code></td><td><del>文字</del></td></tr><tr><td><code>***斜粗体***</code></td><td><strong><em>文字</em></strong></td></tr><tr><td><code>__斜粗体__</code></td><td><strong>文字</strong></td></tr><tr><td><code>***~~斜粗体删除线~~***</code></td><td><strong><em><del>斜粗体删除线</del></em></strong></td></tr><tr><td><code>~~**斜粗体删除线***~~</code></td><td><strong><em><del>斜粗体删除线</del></em></strong></td></tr></tbody></table><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><p>使用一对反引号即可<br>    <code>高亮文字</code>,<code>高亮文字</code></p><p><a href="">高亮文字</a></p><pre><code>实现方案:[高亮文字]()</code></pre><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><p><a href="https://www.baidu.com" target="_blank" rel="noopener">百度</a></p><pre><code>实现方案:[百度](https://www.baidu.com)</code></pre><h2 id="引用图片"><a href="#引用图片" class="headerlink" title="引用图片"></a>引用图片</h2><p><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo">   </p><pre><code>实现方案:![alt](URL &quot;title&quot;)alt 和 title 都可以省略![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</code></pre><p><img src="https://www.google.co.jp/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png" alt=""></p><h2 id="emoji-表情"><a href="#emoji-表情" class="headerlink" title="emoji 表情"></a>emoji 表情</h2><p>默认情况下Github 的Markdown 语法支持emoji表情<br><a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">emoji大全</a><br>or<br><a href="https://github.com/gerenvip/README/blob/master/emoji.md" target="_blank" rel="noopener">emoji大全</a></p><p>简单举例:</p><p>比如<code>:blush:</code>，可以显示:blush:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇文章简要介绍常用的Markdown语法，方便快速查阅。&lt;/p&gt;
&lt;h1 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h1&gt;&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=
      
    
    </summary>
    
      <category term="markdown" scheme="http://aicodeing.github.io/categories/markdown/"/>
    
    
      <category term="markdown" scheme="http://aicodeing.github.io/tags/markdown/"/>
    
      <category term="emoji" scheme="http://aicodeing.github.io/tags/emoji/"/>
    
  </entry>
  
</feed>
